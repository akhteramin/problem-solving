#######################Combination With Backtracking########################
Q: Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

class Solution {
public:
    vector<vector<int>> ans;
    void solve(int n, int k, int start,vector<int> v){
    	///////Combination Size has been done, so return///////////////
        if(v.size() == k){
            ans.push_back(v);
            return;
        }
        for(int i=start; i<=n; i++){
            v.push_back(i);
            solve(n,k,i+1,v);
            ///Backtracking
            v.pop_back();
        }
    }
    vector<vector<int>> combine(int n, int k) {
        vector<int> v;
        solve(n,k,1,v);
        return ans;
    }
};

#######################Subset With Backtracking########################
Given an integer array nums that may contain duplicates, return all possible subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.

class Solution {
public:
    set<vector<int>> result;
    void subset_rec(vector<int>& nums, vector<int>& v,int start){
        sort(v.begin(),v.end());
        result.insert(v);
        for(auto i=start;i<nums.size();i++)
        {
            v.push_back(nums[i]);
            subset_rec(nums,v,i+1);
            v.pop_back();
        }
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<int> v;
        sort(nums.begin(),nums.end());
        subset_rec(nums,v,0);
        vector<vector<int>> ans;
        ans.assign(result.begin(),result.end());
        return ans;
    }
};





#######################Recursion in Tree########################
Q: Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.

class Solution {
public:
    vector<TreeNode*> helper(int start, int end){
        vector<TreeNode*> result;
		//BASE CASE
        if(start>end){
			//PUSH NULL TO THE NODE AND RETURN
            result.push_back(NULL);
            return result;
        }
        for(int i=start;i<=end;i++){
			//BUILDING THE LEFT BRANCH FOR ROOT `i`
            vector<TreeNode*> left = helper(start,i-1);

			//BUILDING THE RIGHT BRANCH FOR ROOT `i`
            vector<TreeNode*> right = helper(i+1,end);

            for(TreeNode* l:left){

                for(TreeNode* r:right){

					//ASSEMBLE THE BRANCH TO ROOT `i`
                    TreeNode* root = new TreeNode(i);
                    root->left = l;
                    root->right = r;
					//PUSH TREE TO THE RESULT VECTOR
                    result.push_back(root);
                }
            }
            
        }
        return result;
    }
    vector<TreeNode*> generateTrees(int n) {
     
        return helper(1, n);
    }
    
};

#######################Divide and Conquer########################
Q: Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.

class Solution {
public:
    int arr[26];
    int helper(string s, int start, int end, int k){
        
        if(end-start<k)
            return 0;
        fill_n(arr,26,0);
        
        /// count letter in th string
        for(int i=start;i<end;i++)
            arr[s[i]-'a']++;
        /// calculate by dividing the segemnt into two sub-segment
        for(int i=start;i<end;i++){
            if(arr[s[i]-'a']<k){
                return max(helper(s,  start, i, k),helper(s,  i+1, end, k));
            }
        }
        return end-start;
    }
    int longestSubstring(string s, int k) {
        return helper( s,  0, s.length(), k);
                
    }
};

Example:

Input: s = "ababbc", k = 2
Output: 5
Explanation: The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.


#######################Dynamic Programming (longest palindromic substring)########################
Q1: Given a string s, return the longest palindromic substring in s.

class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.length();
        if(n==1)
            return s;
        pair<int,int> max_pair = make_pair(0,0);
        int dp[n][n];
        fill_n(*dp, n * n, false);
        for(int i=0;i<n;i++){
            //set 1 for all matching index (0,0) (1,1) (2,2)
            dp[i][i]=1;
            //set max pair
            max_pair=max_pair.second>max_pair.first?max_pair:make_pair(i,i);
            if(i==n-1)
                continue;
            //set value 0/1 for all matching index (0,1) (1,2) (2,3)
            dp[i][i+1] = s[i]==s[i+1];
            //set max pair
            max_pair=dp[i][i+1]?make_pair(i,i+1):max_pair;
            
        }
        for(int len=3;len<=n;len++){
            //In previous iteration we have populted till length 2. This iteration will fill from length 3 for each row to length n for each row.
            for(int i=0,j=i+len-1;j<n;++i,++j){
                // filling up rest index of the matrix digonally as shown using `\`
                //1 1 0\ 0\ 0\ 0\ 
                //0 1 1 0\ 0\ 0\ \->Iteration 4
                //0 0 1 1 0\ 0\ \->Iteration 3
                //0 0 0 1 1 0\ \->Iteration 2
                //0 0 0 0 1 1 \->Iteration 1 (0,2)->(1,3)->(2,4)
                //0 0 0 0 0 1
                
                dp[i][j]=(s[i]==s[j]) && dp[i+1][j-1];
                if(dp[i][j])
                    max_pair=max_pair.second-max_pair.first>j-i?max_pair:make_pair(i,j);
            }
        }
        
        // returning the string of max length
        return s.substr(max_pair.first,max_pair.second-max_pair.first+1);
        
    }
};

----------------------------- Maximum Subarray--------------------------------------
Q2: Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

class Solution {
public:
    
    int maxSubArray(vector<int>& nums) {
        int maxsum = nums[0];
        ///hold current sum
        int cursum = 0;
        for(int i=0;i<nums.size(); i++){
            ///Max sum can not be less than zero, re-stabilize the value to 0 when cursum goes below 0.
            if(cursum<0)
                cursum=0;
            cursum+=nums[i];
            ///storing the max sum
            maxsum = max(maxsum,cursum);
        }
        return maxsum;
        
    }
};

------------------------------ Prefix Sum -----------------------------------------
int arr[] = {2, 3, -4, 5, 1, 2}
int prefix_sum  = {2, 5(2+3), 1(2+3-4), 6, 7, 9}

query between sum of index 2 to 5.
Ans: prefix_sum[5]- prefix_sum[1]
-------------------------------Segment Tree---------------------------------------
Count Range Sum
1. Create an array of prefix_sum
2. Make a segment tree of that prefix sum
3. Count number of sum in segement tree fall in the given range.
4. Loop i from 1 to n-1
    Update segment tree nodes by subtracting each node prefix_sum[i-1]
    Count number of sum in sgement tree fall in the given range.
5. Return total count



-------------------------------------- Determine if Two Strings Are Close---------------------------------------------

Two strings are considered close if you can attain one from the other using the following operations:

Operation 1: Swap any two existing characters.
For example, abcde -> aecdb
Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.
For example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)
You can use the operations on either string as many times as necessary.

Given two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.

 

Example 1:

Input: word1 = "abc", word2 = "bca"
Output: true
Explanation: You can attain word2 from word1 in 2 operations.
Apply Operation 1: "abc" -> "acb"
Apply Operation 1: "acb" -> "bca"

class Solution {
public:
    bool closeStrings(string word1, string word2) {
        vector<int>aa(26),bb(26);
        set<char>a,b;
        if(word1.size()!=word2.size()) return false;
        for(int i=0;i<word1.size();i++)
        {
            aa[word1[i]-'a']++;
            a.insert(word1[i]);
            bb[word2[i]-'a']++;
            b.insert(word2[i]);
        }
        sort(aa.begin(),aa.end());
        sort(bb.begin(),bb.end());
        return (aa==bb and a==b);
        
    }
};

---------------------------------------Trie(Retrieval of data)------------------------------------------------------------
This is a data structure based on prefix of a string. 
The word “abacaba” has the following prefixes:
a
ab
aba
abac
abaca
abacab

If there is a dictionary of words like this: tree, trie, string, strangular. The trie for this dictionary will be look like this.

            null
            /\
           t  s
          /    \
         r      t
        / \      \
       e   i      r
      /     \    / \
     e       e  i   a
                |   |
                n   n
                |   |
                g   g
                    |
                    u
                    |
                    l
                    |
                    a
                    |
                    r

Here if we search for "strang", we can easily achieve that thoroughly.

Basic Structure of trie:
```
 typedef struct node{
        struct node* child[26];
        bool isComplete=false;
    }Node;
Node *root;
```

----------------------------------------Sliding Window--------------------------------------------------------------
1456. Maximum Number of Vowels in a Substring of Given Length
Given a string s and an integer k.

Return the maximum number of vowel letters in any substring of s with length k.

Vowel letters in English are (a, e, i, o, u).

Example 1:

Input: s = "abciiidef", k = 3
Output: 3
Explanation: The substring "iii" contains 3 vowel letters.

class Solution {
public:
    int maxVowels(string s, int k) {
        int window_start=0, max_count=0, max_result=0;
        // 
        for(auto window_end=0;window_end<s.length();window_end++){
            // 
            if(s[window_end]=='a' || s[window_end]=='e' || s[window_end]=='i' || s[window_end]=='o' || s[window_end]=='u')
            {
                max_count++;
            }
            if(window_end-k>=0 && (s[window_start]=='a' || s[window_start]=='e' || s[window_start]=='i' || s[window_start]=='o' || s[window_start]=='u')){
                max_count--;
                window_start++;
            }
            else if(window_end-k>=0){
                window_start++;
            }
            cout<<window_start<<" "<<window_end<<endl;
            max_result = max(max_result,max_count);
        }
        return max_result;
    }
};

Window Start      Window End
        0           0
        0           1
        0           2
        1           3
        2           4
        3           5
        4           6
        5           7
        6           8
-----------------------------------------------Longest Substring without repeating characters----------------------------
Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

class Solution {
public:

    int lengthOfLongestSubstring(string s) {
        int max_length=0, window_start=0;
        //the count character can be any of english letters, digit, symbol and spaces, the size of the count array is 256 to posses any ascii characters.
        int count_char[257]={0};
        int last_index[257]={0};
        //if string size is less than 2, it will return the length of the string
        if(s.length()<2){
            return s.length();
        }

        for(auto window_end=0;window_end<s.length();window_end++){
            //count the character
            count_char[s[window_end]]++;
            
            //if character count is greater than 1 and last index of this character is greater than the window start, then window_start should be assigned to followin gindex of last_index.
            if(count_char[s[window_end]]>1 && last_index[s[window_end]]>=window_start){
                window_start = last_index[s[window_end]]+1;
                
            }
            //last index of current character should be window_end
            last_index[s[window_end]] = window_end;
            //saving the maximum length in each iteration
            max_length = max(max_length, window_end-window_start+1);
            // cout<<window_start<<" "<<window_end<<endl;
        }
        // cout<<endl;
            
        return max_length;
        
        
    }
};

-----------------------------------------------Task Scheduling(Greedy Method)------------------------------------------
1834. Single-Threaded CPU
You have a single-threaded CPU that can process at most one task at a time and will act in the following way:

If the CPU is idle and there are no available tasks to process, the CPU remains idle.
If the CPU is idle and there are available tasks, the CPU will choose the one with the shortest processing time. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.
Once a task is started, the CPU will process the entire task without stopping.
The CPU can finish a task then start a new one instantly.
Return the order in which the CPU will process the tasks.

Input: tasks = [[1,2],[2,4],[3,2],[4,1]]
Output: [0,2,3,1]
Explanation: The events go as follows: 
- At time = 1, task 0 is available to process. Available tasks = {0}.
- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.
- At time = 2, task 1 is available to process. Available tasks = {1}.
- At time = 3, task 2 is available to process. Available tasks = {1, 2}.
- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.
- At time = 4, task 3 is available to process. Available tasks = {1, 3}.
- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.
- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.
- At time = 10, the CPU finishes task 1 and becomes idle.


Solution:
class Solution{
public:
    vector <int> getOrder(vector<vector<int>>& a){
    //save the index as an element in the vector, so that when we will do sorting the index can be retained
        for(auto i=0;i<a.size();i++){
            a[i].push_back(i);
        }

        // sort the vector
        sort(a.begin(),a.end());
        vector<int> ans;

        //declare a heap for reversing the priority queue. This queue basically represents the task remain to do in a given time. If this priority queue is empty, the machine is idle. 
        priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;

        //this variable will hold the value of current index
        int idx=0;

        //the variable will hold current timeline 
        long long timeline=0;

        while(idx<a.size()){
            //Set timeline
            timeline = a[idx][0];
            //Push new task length and corresponding index 
            pq.push(make_pair(a[idx][1],a[idx][2]));
            // index ++
            idx++;
            //Run this loop till the PQ is empty that is till our machine remains running
            while(!pq.empty()){
                //Extract the top of the item and save it to `t`
                pair<int,int> t = pq.top();

                //Pop the current item, that is current item `t` is using the machine.
                pq.pop();

                //Push the `t` index in `ans` vector
                ans.push_back(t.second);

                //Add current machines processing time to timeline to fix when current task will be ended.
                timeline+=t.first;

                //Add tasks to queue until all task with start time less than current timeline is considered.
                while(idx<a.size() && timeline>=a[idx][0]){
                    pq.push(make_pair(a[idx][1],a[idx][2]));
                    idx++;
                }
            }
        }
        
        return ans;
        
    }
};



-----------------------------------------------Activity Selection(Greedy Method)------------------------------------------
public:
    //Activity Search Algorithm
//     1) Sort the activities according to their finishing time 
    // 2) Select the first activity from the sorted array and print it. 
    // 3) Do following for remaining activities in the sorted array. 
    // …….a) If the start time of this activity is greater than or equal to the finish time of previously selected activity then select this activity and print it.
    static bool comp(vector<int>&a, vector<int>&b){
        return a[1]<b[1];
    }
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        if(intervals.size()<2){
            return 0;
        }
        sort(intervals.begin(),intervals.end(), comp);
      
        int count=0;
        vector<int> previous_activity = intervals[0];
        for(auto i=1;i<intervals.size();i++){
            if(intervals[i][0]>=previous_activity[1]){
                previous_activity = intervals[i];
            }
            else {
                count++;
            }
        }

        return count;
    }


---------------------------------------------Minimum Spanning Tree(MST)---------------------------------------------------------
Given a connected and undirected graph, a spanning tree of that graph is a subgraph that is a tree and connects all the vertices together. A single graph can have many different spanning trees. A minimum spanning tree (MST) or minimum weight spanning tree for a weighted, connected, undirected graph is a spanning tree with a weight less than or equal to the weight of every other spanning tree. The weight of a spanning tree is the sum of weights given to each edge of the spanning tree.

1. Sort all the edges in non-decreasing order of their weight. 
2. Pick the smallest edge. Check if it forms a cycle with the spanning tree formed so far. If cycle is not formed, include this edge. Else, discard it. 
3. Repeat step#2 until there are (V-1) edges in the spanning tree.


---------------------------------------------Buy and Sell Stock(Dynamic Programming)---------------------------------------------------------
You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int ssp=0, bbp= -prices[0];
        for( auto i=0;i<prices.size();i++){
            ssp = max(ssp, prices[i]+bbp -fee);
            bbp = max(bbp, ssp-prices[i]);
        }
        return ssp;
    }
};

---https://www.youtube.com/watch?v=pTQB9wbIpfU

--Explanation: 
Within each step, we are considering how selling can be beneficial or buying to maximize the profit. !


